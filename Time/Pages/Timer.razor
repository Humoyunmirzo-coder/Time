@page "/timer"
@using Stl.CommandR
@using Stl.Fusion.Blazor
@using System.Threading
@using Stl.Fusion.Extensions
@using Time.Repository
@using Time.Service
@using Timer = Time.Data.Timer
@using static Time.Service.TimerServices
@inject TimerService timerService
@inherits ComputedStateComponent<(int, int, int)>
@inject IFusionTime Time
@inject NavigationManager Nav
@inject ICommander Commander
@inject TimerRepository timerRepo

@{
    var state = State.ValueOrDefault;
    var error = State.Error;
    var _elapsedTime = state.Item1;
    var _reminingTime = state.Item2;
    var _elapsedPercentage = state.Item3;
}

<h1>Timer app</h1>
<div class="alert alert-primary">
    Open this page in <a href="@Nav.Uri" target="_blank">another window</a> to see it updates in sync.
</div>
@if (error != null)
{
    <div class="alert alert-warning" role="alert">Update error: @error.Message</div>
}
<div>
    <input type="number" @bind="TimerDuration" @oninput="Input" readonly="@IsRunning" placeholder="Taymer vaqti (soniya)" />
    <button @onclick="StartTimer">Start</button>
    <button @onclick="Pause">Pause</button>
    <p hidden="@isPause">Stopping...</p>
</div>

<div>
    <p>Qolgan vaqt:  @_reminingTime</p>
    <p>Boshlash vaqt: @startTime</p>
    <p>Tugash vaqt: @endTime</p>
</div>
<div>
    <p>O'tgan vaqt: @_elapsedTime</p>
</div>

<div style="position: relative; width: 100%; height: 20px; background: lightgray;">
    <div style="position: absolute; width: @_elapsedPercentage%; height: 100%; background: green;"></div>
</div>

@if (timerData == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Start Time</th>
                <th>End Time</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var timer in timerData)
            {
                <tr>
                    <td>@timer.Id</td>
                    <td>@timer.StartTime</td>
                    <td>@timer.EndTime</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    protected override async Task<(int, int, int)> ComputeState(CancellationToken cancellationToken)
    {
        var result = await timerService.Get();
        startTime = result.Item2;
        endTime = result.Item3;
        TimerDuration = result.Item1;
        timerData = await timerService.GetData();
        var (isRunning, remainingTime, elapsedTime, elapsedPercentage, pause) = await timerService.Update();
        IsRunning = isRunning;
        isPause = !pause;
        return (remainingTime, elapsedTime, elapsedPercentage);
    }

    private async Task StartTimer()
    {
        if (IsRunning || !isPause) return;
        await Commander.Call(new TimerService.TimerDurationCons(TimerDuration));
    }

    public ICollection<Time.Data.Timer> timerData = new List<Time.Data.Timer>();
    public bool IsRunning = false;
    public bool isPause = true;
    public int TimerDuration;
    private DateTime startTime;
    private DateTime endTime;

    protected override async void OnInitialized()
    {
        timerData = await timerService.GetData();
        base.OnInitialized();
    }

    private void Input(ChangeEventArgs e) { }

    private void Pause(MouseEventArgs e)
    {
        var result = timerService.PauseHandler();
        if (!result)
            isPause = true;
        else
            isPause = false;
    }
}
