@page "/timer"
@using Stl.CommandR
@using Stl.Fusion.Blazor
@using System.Threading
@using Stl.Fusion.Extensions
@using Time.Repository
@using Time.Service
@using Timer = Time.Data.Timer
@using static Time.Service.TimerService
@inherits ComputedStateComponent<(int, int, int)>
@inject TimerService timerService
@inject IFusionTime Time
@inject NavigationManager Nav
@inject ICommander Commander
@inject TimerRepository timerRepo

@{
    var state = State.ValueOrDefault;
    var error = State.Error;
    var _elapsedTime = state.Item1;
    var _remainingTime = state.Item2;
    var _elapsedPercentage = state.Item3;
}

<h1>Timer</h1>
<div class="alert alert-primary">
    Open this page in <a href="@Nav.Uri" target="_blank">another window</a> to see it updates in sync.
</div>
@if (error != null)
{
    <div class="alert alert-warning" role="alert">Update error: @error.Message</div>
}

<!-- Qolgan vaqt, boshlash vaqti, tugash vaqti va o'tgan vaqt ma'lumotlarini bir qator qilib ko'rsatish -->
<div class="info-bar">
    <span>Qolgan vaqt: @_elapsedTime</span>
    <span>Boshlash vaqt: @startTime</span>
    <span>Tugash vaqt: @endTime</span>
    <span>O'tgan vaqt: @_remainingTime</span>
</div>

<!-- Input vaqti shaklini o'zgartirish -->
<div class="input-container">
    <input type="number" @bind="TimerDuration" @oninput="OnInputChange" readonly="@IsRunning" placeholder="Taymer vaqti (soniya)" />
    <div class="button-container">
        <button @onclick="StartTimer">Start</button>
        <button @onclick="Pause">Pause</button>
    </div>
    <p hidden="@isPause">Stopping...</p>
</div>

<!-- Aylana shaklidagi progress bar -->
<div class="progress-container">
    <div class="progress-circle" style="--percentage: @_elapsedPercentage;"></div>
    <div class="progress-text">@FormatTime(_remainingTime)</div>
</div>

@if (timerData == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Start Time</th>
                <th>End Time</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var timer in timerData)
            {
                <tr>
                    <td>@timer.Id</td>
                    <td>@timer.StartTime</td>
                    <td>@timer.EndTime</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    protected override async Task<(int, int, int)> ComputeState(CancellationToken cancellationToken)
    {
        var result = await timerService.Get();
        startTime = result.Item2;
        endTime = result.Item3;
        TimerDuration = result.Item1;
        timerData = await timerService.GetData();
        var (isRunning, remainingTime, elapsedTime, elapsedPercentage, pause) = await timerService.Update();
        IsRunning = isRunning;
        isPause = !pause;
        return (remainingTime, elapsedTime, elapsedPercentage);
    }

    private async Task StartTimer()
    {
        if (IsRunning || !isPause) return;
        await Commander.Call(new TimerDurationCons(TimerDuration));
    }

    public ICollection<Time.Data.Timer> timerData = new List<Time.Data.Timer>();
    public bool IsRunning = false;
    public bool isPause = true;
    public int TimerDuration;
    private DateTime startTime;
    private DateTime endTime;

    protected override async void OnInitialized()
    {
        timerData = await timerService.GetData();
        base.OnInitialized();
    }

    private void OnInputChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newValue))
        {
            TimerDuration = newValue;
        }
    }

    private void Pause(MouseEventArgs e)
    {
        var result = timerService.PauseHandler();
        if (!result)
            isPause = true;
        else
            isPause = false;
    }

    private string FormatTime(int totalSeconds)
    {
        int minutes = totalSeconds / 60;
        int seconds = totalSeconds % 60;
        return $"{minutes:D2}:{seconds:D2}";
    }
}

<style>
    .input-container {
        text-align: center;
        margin: 20px auto;
    }

        .input-container input {
            width: 100%;
            max-width: 300px;
            padding: 10px;
            font-size: 1.2em;
            border-radius: 5px;
            border: 1px solid #ddd;
            box-shadow: 0 0 5px rgba(0,0,0,0.2);
        }

    .button-container {
        margin-top: 10px;
    }

        .button-container button {
            margin: 5px;
            padding: 10px 20px;
            font-size: 1em;
            border-radius: 5px;
            border: 1px solid #ddd;
            background-color: #007bff;
            color: white;
            cursor: pointer;
        }

            .button-container button:hover {
                background-color: #0056b3;
            }

    .info-bar {
        display: flex;
        justify-content: space-around;
        align-items: center;
        background-color: #f8f9fa; /* Yashil rangsiz */
        color: black;
        padding: 10px;
        border-radius: 10px;
        margin: 20px 0;
    }

    .progress-container {
        position: relative;
        width: 150px;
        height: 150px;
        margin: auto;
    }

    .progress-circle {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border-radius: 50%;
        background: conic-gradient(green var(--percentage), lightgray 0);
        border: 10px solid lightgray;
        border-radius: 50%;
        box-shadow: 0 0 10px rgba(0,0,0,0.3);
    }

    .progress-text {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 1.2em;
        color: black;
        text-align: center;
    }
</style>
